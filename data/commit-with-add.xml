<?xml version="1.0" encoding="UTF-8"?>
<commit>
  <removed type="array"/>
  <added type="array">
    <added>
      <filename>data/commits.xml</filename>
    </added>
  </added>
  <message>Added support for listing recent commits.</message>
  <modified type="array">
    <modified>
      <diff>@@ -50,22 +50,61 @@ class Repository(object):
     def __repr__(self):
         return "&lt;&lt;Repository %s&gt;&gt;" % self.name
 
-class User(object):
-    """A github user."""
+class Person(object):
+    """A person."""
 
-    def __init__(self, doc):
-        ch=doc.firstChild.firstChild
+    def __init__(self, el):
+        ch=el.firstChild
         while ch:
             if ch.nodeType != xml.dom.Node.TEXT_NODE:
                 if ch.localName != 'repositories':
                     self.__dict__[ch.localName] = ch.firstChild.data
             ch=ch.nextSibling
-        repos=[Repository(el) for el in doc.getElementsByTagName('repository')]
+        repos=[Repository(el) for el in el.getElementsByTagName('repository')]
         self.repos=dict([(r.name, r) for r in repos])
 
     def __repr__(self):
+        return "&lt;&lt;Person %s &lt;%s&gt;&gt;&gt;" % (self.name, self.email)
+
+class User(Person):
+    """A github user."""
+
+    def __init__(self, doc):
+        Person.__init__(self, doc.firstChild)
+
+    def __repr__(self):
         return "&lt;&lt;User %s with %d repos&gt;&gt;" % (self.login, len(self.repos))
 
+class Commit(object):
+    """A single commit."""
+
+    def __init__(self, el):
+        ch=el.firstChild
+        while ch:
+            if ch.nodeType != xml.dom.Node.TEXT_NODE:
+                if ch.localName == 'parents':
+                    self.parents = [str(s.firstChild.data)
+                        for s in ch.getElementsByTagName('id')]
+                elif ch.localName == 'author':
+                    self.author = Person(ch)
+                elif ch.localName == 'committer':
+                    self.committer = Person(ch)
+                elif ch.localName == 'committed-date':
+                    self.committedDate = self.__parseDate(ch)
+                elif ch.localName == 'authored-date':
+                    self.authoredDate = self.__parseDate(ch)
+                else:
+                    self.__dict__[ch.localName] = ch.firstChild.data
+            ch=ch.nextSibling
+
+    def __parseDate(self, el):
+        dateStr=el.firstChild.data
+        # XXX:  Parse here.
+        return dateStr
+
+    def __repr__(self):
+        return "&lt;&lt;Commit %s&gt;&gt;" % self.id
+
 class GitHub(object):
     """Interface to github."""
 
@@ -78,6 +117,13 @@ class GitHub(object):
         doc=xml.dom.minidom.parseString(x)
         return User(doc)
 
+    def commits(self, username, repo, branch):
+        """Get the recent commits for the given repo."""
+        x=self.fetcher("http://github.com/api/v1/xml/%s/%s/commits/%s"
+            % (username, repo, branch)).read()
+        doc=xml.dom.minidom.parseString(x)
+        return [Commit(el) for el in doc.getElementsByTagName('commit')]
+
 if __name__ == '__main__':
     import sys
     u = GitHub().user(sys.argv[1])</diff>
      <filename>github.py</filename>
    </modified>
    <modified>
      <diff>@@ -20,6 +20,11 @@ class GitHubTest(unittest.TestCase):
         return self.__gh('http://github.com/api/v1/xml/dustin',
             'data/user.xml').user('dustin')
 
+    def __loadCommits(self):
+        return self.__gh(
+            'http://github.com/api/v1/xml/caged/gitnub/commits/master',
+            'data/commits.xml').commits('caged', 'gitnub', 'master')
+
     def testUserBase(self):
         """Test the base properties of the user object."""
         u=self.__loadUser()
@@ -43,6 +48,24 @@ class GitHubTest(unittest.TestCase):
         self.assertEquals("&lt;&lt;Repository buildwatch&gt;&gt;",
             repr(u.repos['buildwatch']))
 
+    def testCommitsBase(self):
+        commits=self.__loadCommits()
+        self.assertEquals(30, len(commits))
+        c=commits[0]
+        self.assertEquals('da603ec86b62418e2ad433bb848ae6073cef7137', c.id)
+        self.assertEquals("Consider .xib files binary.", c.message)
+        self.assertEquals(
+            "http://github.com/dustin/buildwatch/commit/%s" % c.id, c.url)
+        self.assertEquals("2008-03-12T15:44:56-07:00", c.committedDate)
+        self.assertEquals("2008-03-12T15:44:56-07:00", c.authoredDate)
+        self.assertEquals("3c40e4178cedbc98214eb9a2b987b2d26a60d09c", c.tree)
+        self.assertEquals(['c80c0d9557bc88ec236e7de9854f738c1d6c03b9'],
+            c.parents)
+        self.assertEquals('Dustin Sallings', c.author.name)
+        self.assertEquals('Dustin Sallings', c.committer.name)
+        self.assertEquals('dustin@spy.net', c.author.email)
+        self.assertEquals('dustin@spy.net', c.committer.email)
+
 if __name__ == '__main__':
     unittest.main()
     # gh=github.GitHub(hack)</diff>
      <filename>githubtest.py</filename>
    </modified>
  </modified>
  <parents type="array">
    <parent>
      <id>f54d6071a0dafadd3ce50dd0b01b3ca3b69818c7</id>
    </parent>
  </parents>
  <url>http://github.com/dustin/py-github/commit/33464f2c56ed5fd64319d8dcc52fdfdb5db9d8ae</url>
  <author>
    <name>Dustin Sallings</name>
    <email>dustin@spy.net</email>
  </author>
  <id>33464f2c56ed5fd64319d8dcc52fdfdb5db9d8ae</id>
  <committed-date>2008-04-11T21:43:32-07:00</committed-date>
  <authored-date>2008-04-11T21:43:32-07:00</authored-date>
  <tree>b73e9af69c043f68b19aa000980e56377fddb600</tree>
  <committer>
    <name>Dustin Sallings</name>
    <email>dustin@spy.net</email>
  </committer>
</commit>
